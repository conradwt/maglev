= MagLev KD Tree Using Google Maps Example

== Overview

This directory contains an implementation of a KD-Tree of dimension two
using Google Maps API as the GUI.  A KD-Tree is a binary tree that can 
be used to search for 2D data, i.e., nodes with a latitude and longitude.
In this demo, only the closest zipcode (i.e. k = 1) for a selected latitude
and longitude will be displayed along with the location of the selection. 

== Demo

The demo.rb file is a Sinatra application that allows you to enter a
latitude and longitude (preferably, within the US, if you're using the US
Postal Database), and will find the nearest K zip codes to the lat/lon.  

To run the app, just run rake:

  $ rake

But first: Make sure the maglev server has been started:

  $ cd $MAGLEV_HOME
  $ rake maglev:start

and make sure Sinatra has been installed:

  $ maglev-gem install sinatra

The demo will show up in Sinatra at: http://localhost:3333/

== Profile Ruby Code

You can MagLev with profiling turned on and take a look at the performance
details (see which methods are called the most, and from where, etc.):

  $ rake maglev:gprof    # dumps output in ./profile.out
  $ more profile.out

== Performance

The following are just back of the envelope numbers, from a single run On a
2.4GHz Intel Core 2 Duo (MacBook) with 2G Ram.   The test creates a tree of
one million random locations, then performs one thousand searches on the
tree. Each search is for the nearest 100 points to a different random
location.

=== Summary

The times to iterate all nodes and to run of 1,000 queries for the nearest
100 nodes in Maglev, MRI 1.8.6, MRI 1.9.2 and MRI 1.8.6 + KDTree Gem (C
implementation) are, fastest to slowest:

  MRI + C-extension gem:
                           user     system      total        real
      Time:            0.040000   0.000000   0.040000 (  0.037840)
      Per Query:       0.000040   0.000000   0.000040 (  0.000038)

  Maglev:
                           user     system      total        real
      Time:            0.910000   0.000000   0.910000 (  0.921060)
      Per Query:       0.000910   0.000000   0.000910 (  0.000921)

  MRI v1_9_2_preview2:
                           user     system      total        real
      Time:            3.330000   0.160000   3.490000 (  3.486725)
      Per Query:       0.003330   0.000160   0.003490 (  0.003487)

  MRI v1_8_6_383:
                           user     system      total        real
      Time:           31.170000   0.070000  31.240000 ( 31.293104)
      Per Query:       0.031170   0.000070   0.031240 (  0.031293)

=== MagLev

Detailed results for MagLev.  The MagLev run is broken into two parts,
since we commit the tree into persistent memory.  That means we can run the
queries in a different VM than the one that created the data.  MRI is
forced to create the tree and run the queries in the same VM.

  $ rake maglev:commit
  == Committing tree2d.rb
  == Creating tree of 1000000 random nodes
                            user     system      total        real
  Create Random Points  4.140000   0.080000   4.220000 (  4.231362)
  Create random tree   59.690000   0.450000  60.140000 ( 60.294821)
  Commit data           2.700000   1.050000   3.750000 (  7.259246)
  == Committed tree as Maglev::PERSISTENT_ROOT[:RANDOM_KDTREE]

The times to iterate all nodes and to run of 1,000 queries for the nearest
100 nodes in the previously committed tree:

  $ rake maglev:query

                       user     system      total        real
  Iterate Nodes    1.980000   0.330000   2.310000 (  2.322787)

  1000 queries for 100 nearest nodes
                       user     system      total        real
  Time:            0.910000   0.000000   0.910000 (  0.921060)
  Per Query:       0.000910   0.000000   0.000910 (  0.000921)

  Tree has 1,000,000 nodes

=== MRI

These are the times for 1.8.6 and 1.9.2:

  $ multiruby -Ilib bin/commit.rb

  VERSION = v1_8_6_383
  CMD     = ~/.multiruby/install/v1_8_6_383/bin/ruby -Ilib bin/commit.rb

  == Creating tree of 1000000 random nodes
                            user     system      total        real
  Create Random Points  4.590000   0.220000   4.810000 (  4.823375)
  Create random tree  201.370000   0.780000 202.150000 (202.480597)

                       user     system      total        real
  Iterate Nodes    4.700000   0.010000   4.710000 (  4.705827)

  1000 queries for 100 nearest nodes
                       user     system      total        real
  Time:           31.170000   0.070000  31.240000 ( 31.293104)
  Per Query:       0.031170   0.000070   0.031240 (  0.031293)

  Tree has 1,000,000 nodes

  RESULT = 0

  VERSION = v1_9_2_preview2
  CMD     = ~/.multiruby/install/v1_9_2_preview2/bin/ruby -Ilib bin/commit.rb

  == Creating tree of 1000000 random nodes
                            user     system      total        real
  Create Random Points  1.740000   0.100000   1.840000 (  1.852776)
  Create random tree   48.690000   0.310000  49.000000 ( 48.980875)

                       user     system      total        real
  Iterate Nodes    0.800000   0.000000   0.800000 (  0.808343)

  1000 queries for 100 nearest nodes
                       user     system      total        real
  Time:            3.330000   0.160000   3.490000 (  3.486725)
  Per Query:       0.003330   0.000160   0.003490 (  0.003487)

  Tree has 1,000,000 nodes

  RESULT = 0

  TOTAL RESULT = 0 failures out of 2

  Passed: v1_9_2_preview2, v1_8_6_383
  Failed:

=== C-Version of KDTree gem, MRI 1.8.6

There is a ruby gem written in C from:
http://gurge.com/blog/2009/10/22/ruby-nearest-neighbor-fast-kdtree-gem/
The following numbers are from a run on that:

  $ ruby bin/kdtree_gem_bench.rb
  == Creating tree of 1000000 random nodes
                            user     system      total        real
  Create Random Points  1.270000   0.120000   1.390000 (  1.392870)
  Create random tree    1.510000   0.020000   1.530000 (  1.538959)


  1000 queries for 100 nearest nodes
                       user     system      total        real
  Time:            0.040000   0.000000   0.040000 (  0.037840)
  Per Query:       0.000040   0.000000   0.000040 (  0.000038)

== Acknowledgements

The data file that has the US postal codes is provided by http://GeoNames.org/
under a Creative Commons Attribution 3.0 License.  See etc/readme.txt for
details.

== TODO

  - use a JSON library instead of manually constructing the JSON
  - minimize the Prototype JS library file for better application performance
  - cleanup the Javascript code
  - cleanup the HTML code
  - add some more coolness to the demo



